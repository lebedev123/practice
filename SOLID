SOLID https://medium.com/webbdev/solid-4ffc018077da https://habr.com/ru/company/mailru/blog/412699/

S: Single Responsibility Principle (Принцип единственной ответственности).
Класс должен быть ответственен лишь за что-то одно.
Если класс отвечает за решение нескольких задач, его подсистемы, реализующие решение этих задач, оказываются связанными друг с другом. 
Изменения в одной такой подсистеме ведут к изменениям в другой.
Например, один класс не должен иметь бизнес логику и уметь сохранять в БД.
O: Open-Closed Principle (Принцип открытости-закрытости).
Программные сущности (классы, модули, функции) должны быть открыты для расширения, но не для модификации.
Проще наследоваться с переопределением чем переписывать код.
L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.
Решается использованием интерфейсов и наследованием (подставляется нужная реалзиация в рантайме)
I: Interface Segregation Principle (Принцип разделения интерфейса).
Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента. Клиенты не должны зависеть от интерфейсов, которые они не используют.
Не должно быть такого что при имплементации интерфейса некоторые методы остаются пустыми , нужно разбивать на несколько интерфейсов

D: Dependency Inversion Principle (Принцип инверсии зависимостей).
Объектом зависимости должна быть абстракция, а не что-то конкретное.
Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
Конкретные реалзиации должны зависить от интерфейсов а не от конкретныех реализаций
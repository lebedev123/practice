Lombock :
 автогеттеры и автосеттеры, @LazyGetter , автокнострукторы и NotNull, hashcode, tostring , авто паттерн Билдер, авто try -catch, авто логгер
 
 Spring Actuator:
 Spring Actuator предоставляет несколько готовых конечных точек (endpoint), которые могут быть полезны для мониторинга приложения.
 Данные актуатор передает по http, он делает свои эндпонинты которые вычитывает уже ump
path-mapping.prometheus: "/metrics"
path-mapping.health: "/healthcheck"
path-mapping.env: "sbpsupport/env"
path-mapping.loggers: "sbpsupport/loggers"
path-mapping.heapdump: "sbpsupport/heapdump"
path-mapping.metrics: "sbpsupport/allmetrics"
exposure:
  include: "prometheus,health,env,loggers,heapdump,metrics"

----------------------yml  и  bean

SLF4J: является оберткой над другими фрфеворками логгирования и позволяет перенаправлят вызов в ту библиотеку в которую требуется в данный момент посредством подключения нужной зависимости. 

Logstash and slfj :
 Logstash — это орудие для сбора, фильтрации и нормализации логов. Оно является бесплатным и open source приложением. 
 
consul: 
  системе для поддержания обнаружения сервисов (Service Discovery) и распределенного хранилища ключ-значение.
  На каждой тачке должен быть свой агент Консула (если приложения обращаются на локалхост)? Сюда настройки подключения к БД и Шине
 
prometheus :
 забирает метрики от актуатара (спринг понимает формат сообщения для актуатара на основе зависимости в помнике) БД
 А Графана забирает
 
kibana:
Отображение логов 
 
 
kafka:

micrometer:
Метрики к актуатуру 

springframework.cloud: для consul 


xjcplugins:
jaxb
 

mapper:
Маппит запросы на обхекты

helm :
Структура для юмп с настройками для консула
 
Git:
Децентрализован, Хранит набор снимков , если файл не был изменен то ссылка версию файла не меняется.
Во время каждого коммита осуществляется ссылка на снимок, если файлы не были изменены то ГИТ не учитывает не запоминает их.

У Git есть три основных состояния, в которых могут находиться ваши файлы: зафиксированное (committed), изменённое (modified) и подготовленное (staged).

-Зафиксированный значит, что файл уже сохранён в вашей локальной базе.

-К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы.

-Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.

Когда вы делаете коммит, Git сохраняет его в виде объекта, который содержит указатель на снимок (snapshot) подготовленных данных. 
Этот объект так же содержит имя автора и email, сообщение и указатель на коммит или коммиты непосредственно предшествующие данному (его родителей): 
отсутствие родителя для первоначального коммита, один родитель для обычного коммита, и несколько родителей для результатов слияния двух и более веток.

Создать новую ветку и переключиться на нее: git checkout -b newBranch 
Создать коммит : git commit -a -m 'added fix'
Замержить iss53 в мастер (в лог пишется fast-forward если мерж является сдвигом указателя на новую ветку): git checkout master ; git merge iss53 
Удаление ветки (как правило после мержа ветка больше не нужна ) : git branch -d iss53
Состояние текущей ветки (добавления, удаления, конфликты): git status
Если вы хотите использовать графический инструмент для разрешения конфликтов, можно запустить git mergetool, которое проведет вас по всем конфликтам
Список всех веток (* - текущая ): git branch 
Многие разработчики, использующие Git, придерживаются именно такого подхода, оставляя полностью стабильный код только в ветке master—возможно, только тот код, который был или будет выпущен. 
При этом существует и параллельная ветка с именем develop или next, предназначенная для работы и тестирования стабильности; она не обязательно должна быть всегда стабильной, 
но при достижении стабильного состояния ее содержимое можно слить в ветку master. Она используется для слияния завершённых задач из тематических веток (временных веток наподобие iss53), 
чтобы гарантировать, что эти задачи проходят тестирование и не вносят ошибок.В крупных проектах зачастую появляется ветка proposed или pu (предлагаемые обновления), 
объединяющая ветки с содержимым, которое ещё не готово к включению в ветки next или master. 

---------------------------------------
Есть одна локальная папка проинициализированная как локальный репозиторий, в эту папку можно склонировать какую либо ветку из любого репозитория с помощью git clone , 
далее к этому локальному можно добавить еще один источник (репозиторий .git) git remote add ,далее нужно выкачать добавленный репозиторий (изменений в текущей папке не появится ) git fetch <anotherOrigin>.
!! НА ЭТОМ ЭТАПЕ ТОЛЬКО ВЫКАЧАЛИСЬ ДАННЫЕ ИЗ УДАЛЕННОГО РЕПОЗИТОРИЯ НО В ЛОКАЛЬНОЙ ПАПКЕ СТАРАЯ ВЕТКА ИЗ СТАРОГО УДАЛЕННОГО РЕПОЗИТОРИЯ!! 
Чтобы переключиться на другую ветку другого удаленного репозитория нужно вызвать 
 Для создания новой локальной!!!(в удаленном репозитории будет все тот же master!) ветки "git checkout -b <newLocalBranch> <repoName>/<branchName> "
 Получается что локальная ветка может быть только с уникальным названием (если в двух репо две ветки с названием master то локальная ветка может быть ТОЛЬКО одна и придется их обзывать!)
--------------------------------------- 
 
 Если в локальной папке ОДИН проект то можно обойтись switch 



Локальное создание ветки и отправка в репо git push <remote> <branch>.


gil pull = fetch(забрать обновления) + merge (смержить)


После слияние обновления в master ветку с фичей можно удалить git push origin --delete <branchName>

Слияние и перебазирование 


Обычный трехсторонний мерж
Пройдите через блоки изменений, указанные в двух различиях. Если обе стороны вносят одно и то же изменение в одно и то же место, 
примите любое из них; если один вносит изменение, а другой оставляет этот регион в покое, внесите изменение в финал; 
если оба вносят изменения в месте, но они не совпадают, пометьте конфликт, который нужно разрешить вручную.

Rebase позволяет применить все коммиты последовательно с одной ветки на другую.
 С помощью команды rebase вы можете взять все коммиты из одной ветки и в том же порядке применить их к другой ветке.
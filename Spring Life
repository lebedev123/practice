Inversion of Control (инверсия управления) — это некий абстрактный принцип, набор рекомендаций для написания слабо связанного кода. Суть которого в том, что каждый компонент системы должен быть как можно более изолированным от других, не полагаясь в своей работе на детали конкретной реализации других компонентов.
Dependency Injection (внедрение зависимостей) — это одна из реализаций этого принципа (помимо этого есть еще Factory Method, Service Locator).
IoC-контейнер — это какая-то библиотека, фреймворк, программа если хотите, которая позволит вам упростить и автоматизировать написание кода с использованием данного подхода на столько, на сколько это возможно. Их довольно много, пользуйтесь тем, чем вам будет удобно, я продемонстрирую все на примере Ninject.
Это то, что называется инверсией управления (Inversion of Control).
Было бы неплохо, если бы вам в нашем классе  вообще не приходилось беспокоиться о поиске зависимостей? Вместо того, 
чтобы активно вызывать new или обращаться к public полю другого объекта (получать DataSource), ваш класс мог бы (как-то) кричать, что он ему нужен, но больше не контролирует, когда / как / откуда он его получает?
Если просто добавить поле в конструктор то приходит другая проблема  -  Если раньше вы могли вызывать «new MyClass()», то теперь вам нужно обязательно вызвать новый MyClass(myDependency).
Spring Framework по своей сути является контейнером внедрения зависимостей, который управляет написанными вами классами и их зависимостями для вас.
Тот, кто контролирует все ваши классы и может управлять ими соответствующим образом (читай: создайте их с необходимыми зависимостями), называется ApplicationContext во вселенной Spring.
Сколько экземпляров наших DAO следует создать в Spring? Чтобы ответить на этот вопрос, вам нужно узнать о bean scope (область применения бина).
	Scope("singleton") → Ваш бин будет синглтоном, т.е. будет только один экземпляр.
	Scope("prototype") → Каждый раз, когда кому-то нужна ссылка на ваш компонент, Spring создает новый. (Здесь есть несколько предостережений, например, внедрения прототипов в синглтоны).
	Scope("session") → Для каждого сеанса HTTP пользователя будет создан один компонент.


	
	
	Компоненты также могут быть и @Service , @Repository
	
	Component - помечается класс бина .Если аннотация отсутствует то бин нельзя автоматически положит в IOC, только с помощью класса объявленного @configuration и соедржащий методы который будет возвращать @Bean этого класса
	Configuration - помечается класс который содержит хотя бы метод который помечен как @bean(возвращает бин)
	ComponentScan - ищет компонены (Компоненты также могут быть и @Service , @Repository,@Controller) в текущем пакете .Если отсутствует то невозможно добавить свои бины в контекст
	EnableAutoConfiguration - достает бины из жарников (скомпилены, нельзя добавить аннотация компонент). Если отстутсвует невозомжно положить в IOC классы из jar'ников
	SpringBootApplication = Configuration+EnableAutoConfiguration+ComponentScan
	
Внедрение сеттера должно в первую очередь использоваться только для необязательных зависимостей, которым могут быть назначены разумные значения по умолчанию в классе.
 В противном случае проверки не-null должны выполняться везде, где код использует зависимость. Одним из преимуществ внедрения сеттера является то, 
что методы установки делают объекты этого класса пригодными для реконфигурации или повторного внедрения позже.

Использование constructor injection (конструктор класса помечается как Autowired):
@Component
class Sandwich {
  @Autowired
  Sandwich(Topping toppings, Bread breadType) {
    this.toppings = toppings;
    this.breadType = breadType;
  }
  }
  
  Позволяет предоствратить NPE, Spring проверяет что все аргументы конструктора не null.
  
Использование setter injection (метод класса который устанавливает нужное поле помечается как Autowired):  
  @Component
class Cookie {

  private Topping toppings;

  @Autowired
  void setTopping(Topping toppings) {
    this.toppings = toppings;
  }
  
  Позволяет использовать @Autowired(required = false) c необязательной инициализацией что не допускает constructor injection.
  
Использование field injection (нужное поле помечается как Autowired):  	
@Component
class IceCream {

  @Autowired
  private Topping toppings;
  }
	
	
	НИКОГДА НЕ СМЕШИВАТЬ ИНЖЕКТЫ РАЗНЫМИ СПОСОБАМИ, ЕСЛИ ИСПОЛЬЗОВАТЬ ИНЖЕКТЫ НА ОДНО ПОЛЕ ДВУМЯ ПУТЯМИ ТО РЕЗУЛЬТАТ НЕИЗВЕСТЕН!!!
	 используйте внедрением зависимости через конструктор для обязательных зависимостей и внедрение с помощью метода установки / через поле для необязательных зависимостей.
	 Еще раз предупреждаю: будьте действительно последовательны с этим.
	
	




JMS
JMSTemplate обрабатывает создание и освобождение ресурсов при отправке или синхронном получении сообщений.
JmsTemplate требует ссылки на ConnectionFactory. ConnectionFactory является частью спецификации JMS и служит отправной точкой для работы с JMS. 
Он используется клиентским приложением в качестве фабрики для создания соединений с поставщиком JMS и инкапсулирует различные параметры конфигурации, многие из которых зависят от поставщика, например параметры конфигурации SSL.
При использовании JMS внутри EJB поставщик предоставляет реализации интерфейсов JMS, чтобы они могли участвовать в декларативном управлении транзакциями и выполнять пул соединений и сеансов.
Чтобы использовать эту реализацию, контейнеры Java EE обычно требуют, чтобы вы объявили фабрику соединений JMS как ref-ресурс внутри дескрипторов развертывания EJB или сервлета. 
Чтобы обеспечить использование этих функций с JmsTemplate внутри EJB, клиентское приложение должно убедиться, что оно ссылается на управляемую реализацию ConnectionFactory.
JmsTemplate требует ссылки на ConnectionFactory. ConnectionFactory является частью спецификации JMS и служит отправной точкой для работы с JMS. Он используется клиентским приложением в качестве фабрики для создания соединений с поставщиком JMS и инкапсулирует различные параметры конфигурации,
 многие из которых зависят от поставщика, например параметры конфигурации SSL.

Вы можете настроить уровень кэша контейнера. Обратите внимание, что, когда кэширование не включено, для каждого приема сообщения создается новое соединение и новый сеанс. Объединение этого с недолговечной подпиской с высокими нагрузками может привести к потере сообщений. Убедитесь, что вы используете правильный уровень кэша в таком случае.




acknowledge="transacted" !!



mvn clean package spring:repackage
java -jar -Dspring.profiles.active=local SpringTest-0.0.1-SNAPSHOT.jar



https://habr.com/ru/post/334448/





Существует такое понятие как Inversion of Control, по-русски – Инверсия управления, сокращенно – IoC. IoC — один из принципов, приближающий наш код к слабосвязанности. IoC — это делегирование части наших обязанностей внешнему компоненту.


Существуют разные реализации IoC подхода, нас интересует одна из них — Dependency Injection, внедрение зависимостей. Чт
Бин — создаваемый Spring-ом объект класса, который можно внедрить в качестве значения поля в другой объект.
Инверсия управления - это принцип разработки программного обеспечения, согласно которому управление объектами или частями программы передается контейнеру или фреймворку. Чаще всего используется в контексте объектно-ориентированного программирования.

IOC 
В отличие от традиционного программирования, в котором наш пользовательский код выполняет вызовы библиотеки, IoC позволяет фреймворку управлять выполнением программы и выполнять вызовы нашего пользовательского кода. Для этого фреймворки используют абстракции со встроенным дополнительным поведением. 
Преимущества этой архитектуры:

отделение выполнения задачи от ее реализации
упрощая переключение между различными реализациями
большая модульность программы
большая легкость тестирования программы за счет изоляции компонента или имитации его зависимостей и разрешения компонентам обмениваться данными через контракты


DI
Внедрение зависимостей - это шаблон для реализации IoC, где инвертируемый элемент управления - это установка зависимостей объекта.

Акт соединения объектов с другими объектами или «инъекции» объектов в другие объекты выполняется фраемворком, а не самими объектами.
Контейнер IoC - это общая характеристика фреймворков, реализующих IoC.

В среде Spring контейнер IoC представлен интерфейсом ApplicationContext. Контейнер Spring отвечает за создание экземпляров, настройку и сборку объектов, известных как beans, а также за управление их жизненным циклом.

Платформа Spring предоставляет несколько реализаций интерфейса ApplicationContext - ClassPathXmlApplicationContext и FileSystemXmlApplicationContext для автономных приложений и WebApplicationContext для веб-приложений.

Для сборки bean-компонентов контейнер использует метаданные конфигурации, которые могут быть в форме XML-конфигурации или аннотаций.

Короче говоря, IoC - это гораздо более широкий термин, который включает, но не ограничивается, DI

Термин «инверсия управления» (IoC) изначально означал любой стиль программирования, в котором общая структура или среда выполнения управляли ходом программы.

До того, как у DI появилось имя, люди начали называть фреймворки, управляющие зависимостями, инверсией управляющих контейнеров, и вскоре значение IoC постепенно сместилось к этому конкретному значению: инверсия управления зависимостями.

Инверсия управления (IoC) означает, что объекты не создают других объектов, на которых они полагаются для выполнения своей работы. Вместо этого они получают необходимые объекты из внешнего источника (например, из файла конфигурации xml).

Внедрение зависимостей (DI) означает, что это выполняется без вмешательства объекта, обычно с помощью компонента инфраструктуры, который передает параметры конструктора и устанавливает свойства.



Тот, кто контролирует все ваши классы и может управлять ими соответствующим образом (читай: создайте их с необходимыми зависимостями), называется ApplicationContext во вселенной Spring.

Scope("singleton") → Ваш бин будет синглтоном, т.е. будет только один экземпляр.
Scope("prototype") → Каждый раз, когда кому-то нужна ссылка на ваш компонент, Spring создает новый. (Здесь есть несколько предостережений, например, внедрения прототипов в синглтоны).
Scope("session") → Для каждого сеанса HTTP пользователя будет создан один компонент.

То, что делает эта аннотация @ComponentScan, это сказать Spring: Посмотрите на все классы Java в том же пакете, что и конфигурация контекста, если они выглядят как Spring Bean!

@Transactional для этого метода сигнализирует Spring, что для работы этого метода необходимо открытое соединение с базой данных / транзакция и что указанная транзакция также должна быть зафиксирована в конце. И Spring должна сделать это.


